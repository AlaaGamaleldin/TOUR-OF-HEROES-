{"ast":null,"code":"import { HEROES } from '../Domain/mock-heroes';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\nclass HeroService {\n  constructor(messageService) {\n    this.messageService = messageService;\n  }\n  getHeroes() {\n    const heroes = of(HEROES);\n    this.messageService.add('HeroService: fetched heroes');\n    return heroes;\n  }\n  getHero(id) {\n    // For now, assume that a hero with the specified `id` always exists.\n    // Error handling will be added in the next step of the tutorial.\n    const hero = HEROES.find(h => h.id === id);\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(hero);\n  }\n}\nHeroService.ɵfac = function HeroService_Factory(t) {\n  return new (t || HeroService)(i0.ɵɵinject(i1.MessageService));\n};\nHeroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HeroService,\n  factory: HeroService.ɵfac,\n  providedIn: 'root'\n});\nexport { HeroService };","map":{"version":3,"names":["HEROES","of","HeroService","constructor","messageService","getHeroes","heroes","add","getHero","id","hero","find","h","i0","ɵɵinject","i1","MessageService","factory","ɵfac","providedIn"],"sources":["C:\\My PC\\Angular\\heros\\TOUR-OF-HEROES--main\\src\\app\\service\\hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Hero } from '../Domain/hero';\nimport { HEROES } from '../Domain/mock-heroes';\nimport { Observable, of } from 'rxjs';\nimport { MessageService } from './message.service';\n@Injectable({\n  providedIn: 'root'\n})\nexport class HeroService {\n\n  constructor(private messageService: MessageService) { }\n  getHeroes(): Observable<Hero[]> {\n    const heroes = of(HEROES);\n    this.messageService.add('HeroService: fetched heroes');\n    return heroes;\n  }\n  getHero(id: number): Observable<Hero> {\n    // For now, assume that a hero with the specified `id` always exists.\n    // Error handling will be added in the next step of the tutorial.\n    const hero = HEROES.find(h => h.id === id)!;\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(hero);\n  }\n}\n"],"mappings":"AAEA,SAASA,MAAM,QAAQ,uBAAuB;AAC9C,SAAqBC,EAAE,QAAQ,MAAM;;;AAErC,MAGaC,WAAW;EAEtBC,YAAoBC,cAA8B;IAA9B,KAAAA,cAAc,GAAdA,cAAc;EAAoB;EACtDC,SAASA,CAAA;IACP,MAAMC,MAAM,GAAGL,EAAE,CAACD,MAAM,CAAC;IACzB,IAAI,CAACI,cAAc,CAACG,GAAG,CAAC,6BAA6B,CAAC;IACtD,OAAOD,MAAM;EACf;EACAE,OAAOA,CAACC,EAAU;IAChB;IACA;IACA,MAAMC,IAAI,GAAGV,MAAM,CAACW,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAE;IAC3C,IAAI,CAACL,cAAc,CAACG,GAAG,CAAC,gCAAgCE,EAAE,EAAE,CAAC;IAC7D,OAAOR,EAAE,CAACS,IAAI,CAAC;EACjB;;AAdWR,WAAW,C;mBAAXA,WAAW,EAAAW,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA;AAAA;AAAXd,WAAW,C;SAAXA,WAAW;EAAAe,OAAA,EAAXf,WAAW,CAAAgB,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEPjB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}